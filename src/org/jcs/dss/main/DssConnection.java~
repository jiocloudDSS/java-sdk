package org.jcs.dss.main;
import java.net.URL;
import java.util.List;
import org.jcs.dss.http.Response;
import org.jcs.dss.op.*;
///Class DssConnection
/**
 * 
 * @author raghav
 *
 */
public class DssConnection {

	private String accessKey;
	private String secretKey;
	private String host;

	public DssConnection(String accessKey, String secretKey, String host) {
		this.accessKey = accessKey;
		this.secretKey = secretKey;
		this.host = host;
	}

	public String getAccessKey() {
		return accessKey;
	}

	public String getSecretKey() {
		return secretKey;
	}

	public String getHost() {
		return host;
	}
	
	/// Creates a new DSS bucket
	public Bucket createBucket(String bucketName) throws Exception {
		CreateBucketOp op = new CreateBucketOp(this, bucketName);
		op.execute();
		Bucket bucket = (Bucket) op.processResult(bucketName);
		return bucket;
	}
	/// Returns the List of DSS buckets owned by authenticated sender
	public List<Bucket> listBuckets() throws Exception {
		ListBucketsOp op = new ListBucketsOp(this);
		Response resp = op.execute();
		@SuppressWarnings("unchecked")
		List<Bucket> bucketList = (List<Bucket>) op.processResult(resp);
		return bucketList;
	}
	// Returns the List of objects and its information associated with the requested bucket
	public List<DssObject> listObjects(String bucketName) throws Exception {
		ListObjectsOp op = new ListObjectsOp(this, bucketName);
		Response resp = op.execute();
		@SuppressWarnings("unchecked")
		List<DssObject> objectList = (List<DssObject>) op.processResult(resp);
		return objectList;
	}
	//Deletes the requested bucket
	public void deleteBucket(String bucketName) throws Exception {
		DeleteBucketOp op = new DeleteBucketOp(this, bucketName);
		op.execute();
	}
	//Uploads a new file in the specified DSS bucket 
	public PutObjectResult uploadObjectFromFileName(String bucketName, String objectName,
			String filePath) throws Exception {
		PutObjectOp op = new PutObjectOp(this,bucketName,objectName,filePath);
		Response resp = op.execute();	
		PutObjectResult putObject = (PutObjectResult) op.processResult(resp);
		return putObject;
	}
	//Downloads the requested object from the specified bucket to the requested file path
	public void downloadObjectToFileName(String bucketName, String objectName,
			String filePath) throws Exception {
		GetObjectOp op = new GetObjectOp(this, bucketName,objectName,filePath);
		Response resp = op.execute();
		op.processResult(resp);
	}
	//Returns the information associated with the specified object in the requested bucket
	public Objectdata getObjectDetail(String bucketName, String objectName) throws Exception {
		GetObjectDetailOp op = new GetObjectDetailOp(this, bucketName,objectName);
		Response resp = op.execute();
		Objectdata objectdetail =  (Objectdata) op.processResult(resp);
		return objectdetail;
	}
	//Deletes the specified object in the specified bucket
	public void deleteObject(String bucketName, String objectName) throws Exception {
		DeleteObjectOp op = new DeleteObjectOp(this,bucketName,objectName);
		op.execute();
	}
	//Copies object from specified source to the new destination
	public CopyObjectResult copyObject(String bucketName, String objectName,String copySource) throws Exception{
		CopyObjectOp op = new CopyObjectOp(this,bucketName,objectName,copySource);
		Response resp = op.execute();
		CopyObjectResult copyObject = (CopyObjectResult) op.processResult(resp);
		return copyObject;
	}
	//Performs head bucket operation to determine if the requested bucket exists and if you have permission to access it
	public Response headBucket(String bucketName) throws Exception {
		HeadBucketOp op = new HeadBucketOp(this,bucketName);
		Response resp =op.execute();
		return resp;
	}
	//Performs head object operation to determine if the requested object in the specified bucket exists and if you have permission to access it
	public Response headObject(String bucketName, String objectName) throws Exception {
		HeadObjectOp op = new HeadObjectOp(this,bucketName,objectName);
		Response resp =op.execute();
		return resp;
	}
	//Returns a URL for accessing a DSS resource
	public URL getPresignedURL(String bucketName, String objectName,int expirytime) throws Exception {
		GetPresignedURLOp op = new GetPresignedURLOp(this,bucketName,objectName,expirytime);
		URL url = op.Execute();
		return url;
	}
	//Initiates a multipart upload and returns an InitiateMultipartUploadResult which contains an upload ID
	public InitiateMultipartUploadResult initMPUpload(String bucketName, String objectName) throws Exception {
		InitMPUploadOp op = new InitMPUploadOp(this,bucketName,objectName);
		Response resp = op.execute();
		InitiateMultipartUploadResult initMultipart = (InitiateMultipartUploadResult) op.processResult(resp);
		return initMultipart;
	}
	//List in-progress multipart Uploads associated with the specified bucket and their details 
	public MultipartUploadListing listMPUploads(String bucketName) throws Exception {
		ListMPUploadsOp op = new ListMPUploadsOp(this,bucketName);
		Response resp = op.execute();
		MultipartUploadListing multipartUploadList = (MultipartUploadListing) op.processResult(resp);
		return multipartUploadList;
	}
	//Uploads a part in a multipart upload. You must initiate a multipart upload before you can upload any part. 
	public List<UploadPartResult> uploadPart(String bucketName, String objectName,String uploadId,
			String filePath,int partSize) throws Exception {	
		PartCreationForUploadPart uploadPart = new PartCreationForUploadPart(this, bucketName,  objectName,uploadId,filePath,partSize);
		List<UploadPartResult>  uploadList= uploadPart.createPart();
		return uploadList;
	}
	//Lists the parts that have been uploaded for the specific multipart upload which is identified by upload ID
	public PartListing listPart(String bucketName, String objectName,String uploadId) throws Exception {
		ListPartOp op = new ListPartOp(this,bucketName,objectName,uploadId);
		Response resp = op.execute();
		PartListing partList = (PartListing) op.processResult(resp);
		return partList;
	}
	//Completes a multipart upload by assembling previously uploaded parts in the order of the part number specified. 
	public CompleteMultipartUploadResult completeMultiPart(String bucketName, String objectName,String uploadId,String multipartUpload) throws Exception {
		CompleteMPUploadOp op = new CompleteMPUploadOp(this,bucketName,objectName,uploadId,multipartUpload);
		Response resp = op.execute();
		CompleteMultipartUploadResult completeMPUpload = (CompleteMultipartUploadResult) op.processResult(resp);
		return completeMPUpload;
	}
	//Cancels a multipart upload.
	public void cancelMPUpload(String bucketName, String objectName,String uploadId) throws Exception {
		CancelMPUploadOp op = new CancelMPUploadOp(this,bucketName,objectName,uploadId);
		op.execute();
	}
}
